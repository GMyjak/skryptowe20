[{"C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\App.js":"1","C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\index.js":"2","C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\pages\\Income.js":"3","C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\pages\\Error.js":"4","C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\pages\\Rates.js":"5","C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\pages\\ApiInfo.js":"6","C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\api.js":"7"},{"size":1254,"mtime":1611274206616,"results":"8","hashOfConfig":"9"},{"size":278,"mtime":1611265393071,"results":"10","hashOfConfig":"9"},{"size":3865,"mtime":1611425282391,"results":"11","hashOfConfig":"9"},{"size":164,"mtime":1611264495226,"results":"12","hashOfConfig":"9"},{"size":3732,"mtime":1611424220056,"results":"13","hashOfConfig":"9"},{"size":7972,"mtime":1611572504125,"results":"14","hashOfConfig":"9"},{"size":741,"mtime":1611422425630,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"147mel6",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\App.js",[],"C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\index.js",[],["33","34"],"C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\pages\\Income.js",["35","36"],"import React, {useState} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport {Container, Col, Row} from 'react-bootstrap';\r\nimport {getIncome} from '../api';\r\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, Tooltip} from 'recharts';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Button } from '@material-ui/core';\r\n\r\nfunction parseResponse(data, code) {\r\n    console.log(typeof []);\r\n    console.log(typeof data);\r\n    if (code === 200 && Array.isArray(data)){\r\n        var res = '[';\r\n        data.forEach((obj) => res += `{ 'date': ${obj.date}, 'profit_usd': ${obj.profit_usd}, 'profit_pln': ${obj.profit_pln} }, `);\r\n        if (data.length != 0)\r\n        {\r\n            res = res.slice(0, -2);\r\n        }\r\n        return res + ']';\r\n    }\r\n    else return data;\r\n}\r\n\r\nexport default function Income() \r\n{\r\n    const [dateFrom, setDateFrom] = useState(new Date());\r\n    const [dateTo, setDateTo] = useState(new Date());\r\n    const [textAreaValue, setTextAreaValue] = useState([]);\r\n    const [errorCode, setErrorCode] = useState();\r\n    \r\n    return (\r\n        <Container fluid style={{textAlign: 'left'}}>\r\n            <Row>\r\n                <Col xs={3}>\r\n                    <h1>Income</h1>\r\n                    <h4>Date from</h4>\r\n                    <DatePicker selected={dateFrom} onChange={date => {console.log(date); setDateFrom(date);}} />\r\n                    <h4>Date to</h4>\r\n                    <DatePicker selected={dateTo} onChange={date => {console.log(date); setDateTo(date)}} />\r\n                    <Row style={{marginLeft: '0px', marginTop: '20px'}}>\r\n                        <Button variant='contained' color='primary' onClick={() => {\r\n                            console.log('button:');\r\n                            console.log(dateFrom);\r\n                            console.log(dateTo);\r\n                            getIncome(dateFrom, dateTo)\r\n                                .then(res => {\r\n                                    setErrorCode(res.status)\r\n                                    if (res.status == '200') {\r\n                                        setTextAreaValue(res.data);\r\n                                    }\r\n                                    else {\r\n                                        setTextAreaValue(res.status + res.data);\r\n                                    }\r\n                                })\r\n                                .catch(err => {setErrorCode(500); setTextAreaValue(err);})\r\n                        }}>Try it out</Button>\r\n                    </Row>\r\n                </Col>\r\n                <Col>\r\n                    <Row>\r\n                        <h3>JSON response:</h3><br/>\r\n                    </Row>\r\n                    <Row>\r\n                        <textarea value={parseResponse(textAreaValue, errorCode)} style={{width: '1050px', height:'200px', resize: 'none'}} readOnly/>\r\n                    </Row>\r\n                    <Row>\r\n                        <h3>Diagram:</h3><br/>\r\n                    </Row>\r\n                    <Row>\r\n                        <LineChart width={1000} height={400} data={textAreaValue}>\r\n                            <XAxis dataKey=\"date\" name=\"Date\"/>\r\n                            <YAxis domain={['dataMin - 0.3', 'dataMax + 0.4']}/>\r\n                            <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n                            <Tooltip/>\r\n                            <Legend verticalAlign=\"top\" height={36}/>\r\n                            <Line type=\"linear\" dot={false} dataKey=\"profit_usd\" stroke=\"#27165c\" name=\"Profit USD\"/>\r\n                            <Line type=\"linear\" dot={false} dataKey=\"profit_pln\" stroke=\"red\" name=\"Profit PLN\"/>\r\n                        </LineChart>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n","C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\pages\\Error.js",[],"C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\pages\\Rates.js",["37","38"],"import React, {useState} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport {Container, Col, Row} from 'react-bootstrap';\r\nimport {getRates} from '../api';\r\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, Tooltip} from 'recharts';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Button } from '@material-ui/core';\r\n\r\nfunction parseResponse(data, code) {\r\n    console.log(typeof []);\r\n    console.log(typeof data);\r\n    if (code === 200 && Array.isArray(data)){\r\n        var res = '[';\r\n        data.forEach((obj) => res += `{ 'date': ${obj.date}, 'rate': ${obj.rate}, 'interpolated': ${obj.interpolated} }, `);\r\n        if (data.length != 0)\r\n        {\r\n            res = res.slice(0, -2);\r\n        }\r\n        return res + ']';\r\n    }\r\n    else return data;\r\n}\r\n\r\nexport default function Rates() \r\n{\r\n    const [dateFrom, setDateFrom] = useState(new Date());\r\n    const [dateTo, setDateTo] = useState(new Date());\r\n    const [textAreaValue, setTextAreaValue] = useState([]);\r\n    const [errorCode, setErrorCode] = useState();\r\n    \r\n    return (\r\n        <Container fluid style={{textAlign: 'left'}}>\r\n            <Row>\r\n                <Col xs={3}>\r\n                    <h1>Rates</h1>\r\n                    <h4>Date from</h4>\r\n                    <DatePicker selected={dateFrom} onChange={date => {console.log(date); setDateFrom(date);}} />\r\n                    <h4>Date to</h4>\r\n                    <DatePicker selected={dateTo} onChange={date => {console.log(date); setDateTo(date)}} />\r\n                    <Row style={{marginLeft: '0px', marginTop: '20px'}}>\r\n                        <Button variant='contained' color='primary' onClick={() => {\r\n                            console.log('button:');\r\n                            console.log(dateFrom);\r\n                            console.log(dateTo);\r\n                            getRates(dateFrom, dateTo)\r\n                                .then(res => {\r\n                                    setErrorCode(res.status)\r\n                                    if (res.status == '200') {\r\n                                        setTextAreaValue(res.data);\r\n                                    }\r\n                                    else {\r\n                                        setTextAreaValue(res.status + res.data);\r\n                                    }\r\n                                })\r\n                                .catch(err => {setErrorCode(500); setTextAreaValue(err);})\r\n                        }}>Try it out</Button>\r\n                    </Row>\r\n                </Col>\r\n                <Col>\r\n                    <Row>\r\n                        <h3>JSON response:</h3><br/>\r\n                    </Row>\r\n                    <Row>\r\n                        <textarea value={parseResponse(textAreaValue, errorCode)} style={{width: '1050px', height:'200px', resize: 'none'}} readOnly/>\r\n                    </Row>\r\n                    <Row>\r\n                        <h3>Diagram:</h3><br/>\r\n                    </Row>\r\n                    <Row>\r\n                        <LineChart width={1000} height={400} data={textAreaValue}>\r\n                            <XAxis dataKey=\"date\" name=\"Date\"/>\r\n                            <YAxis domain={['dataMin - 0.3', 'dataMax + 0.4']}/>\r\n                            <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n                            <Tooltip/>\r\n                            <Legend verticalAlign=\"top\" height={36}/>\r\n                            <Line type=\"linear\" dot={false} dataKey=\"rate\" stroke=\"#27165c\" name=\"USD to PLN\"/>\r\n                        </LineChart>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n","C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\pages\\ApiInfo.js",[],"C:\\Users\\g-myj\\source\\repos\\skryptowe20\\currency-api-project\\front-end\\src\\api.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":16,"column":25,"nodeType":"45","messageId":"46","endLine":16,"endColumn":27},{"ruleId":"43","severity":1,"message":"47","line":49,"column":52,"nodeType":"45","messageId":"46","endLine":49,"endColumn":54},{"ruleId":"43","severity":1,"message":"44","line":16,"column":25,"nodeType":"45","messageId":"46","endLine":16,"endColumn":27},{"ruleId":"43","severity":1,"message":"47","line":49,"column":52,"nodeType":"45","messageId":"46","endLine":49,"endColumn":54},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]